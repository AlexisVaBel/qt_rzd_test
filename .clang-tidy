Checks: >
  bugprone-*,
  cert-*,
  clang-analyzer-*,
  cppcoreguidelines-*,
  google-build-namespaces,
  google-default-arguments,
  google-explicit-constructor,
  google-global-names-in-headers,
  google-readability-avoid-underscore-in-googletest-name,
  google-readability-braces-around-statements,
  google-readability-casting,
  google-readability-todo,
  google-runtime-int,google-runtime-operator,
  hicpp-multiway-paths-covered,hicpp-no-assembler,
  llvm-namespace-comment,
  misc-*,
  modernize-*,
  performance-*,
  readability-*,
  -modernize-use-trailing-return-type,
  -cert-err58-cpp,
  -readability-redundant-access-specifiers,
  -modernize-use-nodiscard,
  -readability-magic-numbers,
  -cppcoreguidelines-special-member-functions,
  -modernize-use-auto,
  -cppcoreguidelines-macro-usage,
  -cppcoreguidelines-avoid-non-const-global-variables,
  -google-runtime-int,
  -cppcoreguidelines-pro-bounds-array-to-pointer-decay,
  -modernize-avoid-c-arrays,
  -cppcoreguidelines-pro-type-union-access,
  -modernize-use-using,
  -cppcoreguidelines-owning-memory,
  -hicpp-exception-baseclass,
  -cppcoreguidelines-pro-bounds-constant-array-index,
  -readability-convert-member-functions-to-static,
  -misc-no-recursion,
  -bugprone-easily-swappable-parameters,
  -readability-identifier-length,
  -readability-function-cognitive-complexity,
  -cppcoreguidelines-avoid-magic-numbers,
  -cppcoreguidelines-pro-type-static-cast-downcast

WarningsAsErrors: ''
HeaderFilterRegex: ''
AnalyzeTemporaryDtors: false
FormatStyle: file
CheckOptions:
  - { key: readability-identifier-naming.AggressiveDependentMemberLookup, value: 1 }
  - { key: readability-identifier-naming.ClassCase, value: CamelCase }
  - { key: readability-identifier-naming.ClassConstantCase, value: camelBack }
  - { key: readability-identifier-naming.ClassConstantPrefix, value: sc_ }
  - { key: readability-identifier-naming.ClassMemberCase, value: camelBack }
  - { key: readability-identifier-naming.ClassMemberPrefix, value: s_ }
  - { key: readability-identifier-naming.ClassMethodCase, value: camelBack }
  - { key: readability-identifier-naming.EnumCase, value: CamelCase }
  - { key: readability-identifier-naming.EnumConstantCase, value: CamelCase }
  - { key: readability-identifier-naming.FunctionCase, value: camelBack }
  - { key: readability-identifier-naming.LocalVariableCase, value: camelBack }
  - { key: readability-identifier-naming.MacroDefinitionCase, value: UPPER_CASE }
  - { key: readability-identifier-naming.MemberCase, value: camelBack }
  - { key: readability-identifier-naming.MethodCase, value: camelBack }
  - { key: readability-identifier-naming.NamespaceCase, value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberCase, value: camelBack }
  - { key: readability-identifier-naming.PrivateMemberPrefix, value: _ }
  - { key: readability-identifier-naming.PrivateMethodCase, value: camelBack }
  - { key: readability-identifier-naming.PrivateMethodPrefix, value: _ }
  - { key: readability-identifier-naming.ProtectedMemberCase, value: camelBack }
  - { key: readability-identifier-naming.ProtectedMethodCase, value: camelBack }
  - { key: readability-identifier-naming.PublicMemberCase, value: camelBack }
  - { key: readability-identifier-naming.PublicMethodCase, value: camelBack }
  - { key: readability-identifier-naming.StaticConstantCase, value: camelBack }
  - { key: readability-identifier-naming.StaticConstantPrefix, value: sc_ }
  - { key: readability-identifier-naming.StaticVariableCase, value: camelBack }
  - { key: readability-identifier-naming.StaticVariablePrefix, value: s_ }
  - { key: readability-identifier-naming.StructCase, value: CamelCase }
  - { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase }
  - { key: readability-identifier-naming.ValueTemplateParameterCase, value: camelBack }
  - { key: readability-identifier-naming.TypeAliasCase, value: CamelCase }
  - { key: readability-identifier-naming.TypedefCase, value: lower_case }
  - { key: readability-identifier-naming.VariableCase, value: camelBack }
  - { key: cppcoreguidelines-special-member-functions.AllowSoleDefaultDtor, value: 1 }
  - { key: cppcoreguidelines-special-member-functions.AllowMissingMoveFunctions, value: 1 }
  - { key: cppcoreguidelines-special-member-functions.AllowMissingMoveFunctionsWhenCopyIsDeleted, value: 1 }
  - { key: misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic, value: 1 }
  - { key: hicpp-signed-bitwise.IgnorePositiveIntegerLiterals, value: 1 }
